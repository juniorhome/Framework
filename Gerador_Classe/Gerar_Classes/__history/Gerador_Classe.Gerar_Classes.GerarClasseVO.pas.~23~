unit Gerador_Classe.Gerar_Classes.GerarClasseVO;

interface

uses System.SysUtils, System.Classes, Gerador_Classe.Gerar_Classes.GerarClasse, Gerar_Classe.Interfaces.iBaseGerarClasseBanco, orm.dao.BaseDAOZeos,
  Datasnap.DBClient;

type
  TGerarClasseVO = class(TGerarClasse)
    private
      Resultado: TStringList;
      BaseGerarClasseBanco: iBaseGerarClasseBanco;
    public
      constructor Create(ABaseGerarClasseBanco: iBaseGerarClasseBanco);
      procedure GerarCabecalho; override;
      function GetCampoPk: string; override;
      procedure GerarFieldsProperties override;
      function Gerar(ATabela: string): string;
  end;

implementation

{ TGerarClasseVO }

constructor TGerarClasseVO.Create(ABaseGerarClasseBanco: iBaseGerarClasseBanco);
begin
   BaseGerarClasseBanco := ABaseGerarClasseBanco;
end;

function TGerarClasseVO.Gerar(ATabela: string): string;
begin
   FTabela := ATabela;
   GerarCabecalho;
   GerarFieldsProperties;
   GerarRodape;
   Result := Resultado.Text;
end;

procedure TGerarClasseVO.GerarCabecalho;
begin
  inherited;
  Resultado.Clear;
  Resultado.Add('unit '+ FPacote + '.' + FClasse + 'VO' + '');
  Resultado.Add('');
  Resultado.Add('uses orm.IBaseVO, orm.Atributos');
  Resultado.Add('');
end;

procedure TGerarClasseVO.GerarFieldsProperties;
var cds: TClientDataSet;
    sql: string;
begin
  try
    cds :=  TClientDataSet.Create(nil);
    sql :=  BaseGerarClasseBanco.GetSqlCamposTabela(FTabela);
    cds :=  TBaseDAOZeos<TGerarClasseVO>.New.ConsultaSql(sql);
    BaseGerarClasseBanco.GerarFields(cds, Resultado);
    BaseGerarClasseBanco.GerarProperties(cds, Resultado);
  finally
    cds.DisposeOf;
  end;
end;

function TGerarClasseVO.GetCampoPk: string;
begin
  raise Exception.Create('falta implementar...');
end;

end.
