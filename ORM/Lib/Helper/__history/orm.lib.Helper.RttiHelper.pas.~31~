{$A8,B-,C+,D+,E-,F-,G+,H+,I+,J-,K-,L+,M-,N-,O+,P+,Q-,R-,S-,T-,U-,V+,W-,X+,Y+,Z1}
{$MINSTACKSIZE $00004000}
{$MAXSTACKSIZE $00100000}
{$IMAGEBASE $00400000}
{$APPTYPE GUI}
{$WARN SYMBOL_DEPRECATED ON}
{$WARN SYMBOL_LIBRARY ON}
{$WARN SYMBOL_PLATFORM ON}
{$WARN SYMBOL_EXPERIMENTAL ON}
{$WARN UNIT_LIBRARY ON}
{$WARN UNIT_PLATFORM ON}
{$WARN UNIT_DEPRECATED ON}
{$WARN UNIT_EXPERIMENTAL ON}
{$WARN HRESULT_COMPAT ON}
{$WARN HIDING_MEMBER ON}
{$WARN HIDDEN_VIRTUAL ON}
{$WARN GARBAGE ON}
{$WARN BOUNDS_ERROR ON}
{$WARN ZERO_NIL_COMPAT ON}
{$WARN STRING_CONST_TRUNCED ON}
{$WARN FOR_LOOP_VAR_VARPAR ON}
{$WARN TYPED_CONST_VARPAR ON}
{$WARN ASG_TO_TYPED_CONST ON}
{$WARN CASE_LABEL_RANGE ON}
{$WARN FOR_VARIABLE ON}
{$WARN CONSTRUCTING_ABSTRACT ON}
{$WARN COMPARISON_FALSE ON}
{$WARN COMPARISON_TRUE ON}
{$WARN COMPARING_SIGNED_UNSIGNED ON}
{$WARN COMBINING_SIGNED_UNSIGNED ON}
{$WARN UNSUPPORTED_CONSTRUCT ON}
{$WARN FILE_OPEN ON}
{$WARN FILE_OPEN_UNITSRC ON}
{$WARN BAD_GLOBAL_SYMBOL ON}
{$WARN DUPLICATE_CTOR_DTOR ON}
{$WARN INVALID_DIRECTIVE ON}
{$WARN PACKAGE_NO_LINK ON}
{$WARN PACKAGED_THREADVAR ON}
{$WARN IMPLICIT_IMPORT ON}
{$WARN HPPEMIT_IGNORED ON}
{$WARN NO_RETVAL ON}
{$WARN USE_BEFORE_DEF ON}
{$WARN FOR_LOOP_VAR_UNDEF ON}
{$WARN UNIT_NAME_MISMATCH ON}
{$WARN NO_CFG_FILE_FOUND ON}
{$WARN IMPLICIT_VARIANTS ON}
{$WARN UNICODE_TO_LOCALE ON}
{$WARN LOCALE_TO_UNICODE ON}
{$WARN IMAGEBASE_MULTIPLE ON}
{$WARN SUSPICIOUS_TYPECAST ON}
{$WARN PRIVATE_PROPACCESSOR ON}
{$WARN UNSAFE_TYPE OFF}
{$WARN UNSAFE_CODE OFF}
{$WARN UNSAFE_CAST OFF}
{$WARN OPTION_TRUNCATED ON}
{$WARN WIDECHAR_REDUCED ON}
{$WARN DUPLICATES_IGNORED ON}
{$WARN UNIT_INIT_SEQ ON}
{$WARN LOCAL_PINVOKE ON}
{$WARN MESSAGE_DIRECTIVE ON}
{$WARN TYPEINFO_IMPLICITLY_ADDED ON}
{$WARN RLINK_WARNING ON}
{$WARN IMPLICIT_STRING_CAST ON}
{$WARN IMPLICIT_STRING_CAST_LOSS ON}
{$WARN EXPLICIT_STRING_CAST OFF}
{$WARN EXPLICIT_STRING_CAST_LOSS OFF}
{$WARN CVT_WCHAR_TO_ACHAR ON}
{$WARN CVT_NARROWING_STRING_LOST ON}
{$WARN CVT_ACHAR_TO_WCHAR ON}
{$WARN CVT_WIDENING_STRING_LOST ON}
{$WARN NON_PORTABLE_TYPECAST ON}
{$WARN XML_WHITESPACE_NOT_ALLOWED ON}
{$WARN XML_UNKNOWN_ENTITY ON}
{$WARN XML_INVALID_NAME_START ON}
{$WARN XML_INVALID_NAME ON}
{$WARN XML_EXPECTED_CHARACTER ON}
{$WARN XML_CREF_NO_RESOLVE ON}
{$WARN XML_NO_PARM ON}
{$WARN XML_NO_MATCHING_PARM ON}
{$WARN IMMUTABLE_STRINGS OFF}
unit orm.lib.Helper.RttiHelper;

interface

uses System.Rtti, orm.Atributos;

type
  TRttiFieldHelper = class Helper for TRttiField
    private
    public
      function Tem<T: TCustomAttribute>: Boolean;
      function GetAtribute<T: TCustomAttribute>: T;
  end;

 type
   TRttiPropertyHelper = class Helper for TRttiProperty
     public
       function GetAtribute<T: TCustomAttribute>: T;
       function Tem<T: TCustomAttribute>: Boolean;
       function EhCampoTexto: Boolean;
       function EhCampoInteiro: Boolean;
       function EhCampoData: Boolean;
       function EhCampoDataHora: Boolean;
       function EhCampoExtended: Boolean;
       function EhCampoMonetario: Boolean;
       function EhCampoBooleano: Boolean;
       function EhCampoEstrangeiro: Boolean;
       function EhCampoFiltro: Boolean;
       function EhSomatorio: Boolean;
       function EhMedia: Boolean;
       function EhMinimo: Boolean;
       function EhMaximo: Boolean;
   end;

   type
     TRttiTypeHelper = class Helper for TRttiType
       public
         function GetAtribute<T: TCustomAttribute>: T;
         function Tem<T: TCustomAttribute>: Boolean;
         function GetPropertyFromAtribute<T: TCustomAttribute>: TRttiProperty; overload;
         function GetPropertyFromAtribute<T: TCustomAttribute>(aPropName: string): TRttiProperty; overload;
         function IsTabela: boolean;
         function IsTabelaEstrangeira: Boolean;
         function GetPk: TRttiProperty;
         function GetFk: TRttiProperty;
     end;


implementation

{ TRttiFieldHelper }

function TRttiFieldHelper.GetAtribute<T>: T;
var atributo: TCustomAttribute;
begin
   Result := nil;
   for atributo in GetAttributes do
   begin
     if atributo is T then
       Exit((atributo as T));
   end;
end;

function TRttiFieldHelper.Tem<T>: Boolean;
begin
  Result := GetAtribute<T> <> nil;
end;

{ TRttiPropertyHelper }

function TRttiPropertyHelper.EhCampoBooleano: Boolean;
begin
  Result := Tem<TCampoBooleano>;
end;

function TRttiPropertyHelper.EhCampoData: Boolean;
begin
  Result := Tem<TCampoData>;
end;

function TRttiPropertyHelper.EhCampoDataHora: Boolean;
begin
  Result := Tem<TCampoDataHora>;
end;

function TRttiPropertyHelper.EhCampoEstrangeiro: Boolean;
begin
  Result := Tem<TCampoEstrangeiro>;
end;

function TRttiPropertyHelper.EhCampoExtended: Boolean;
begin
   Result := Tem<TCampoExtended>;
end;

function TRttiPropertyHelper.EhCampoFiltro: Boolean;
begin
   Result := Tem<TCampoFiltro>;
end;

function TRttiPropertyHelper.EhCampoInteiro: Boolean;
begin
  Result := Tem<TCampoInteiro>;
end;

function TRttiPropertyHelper.EhCampoMonetario: Boolean;
begin
  Result := Tem<TCampoMonetario>;
end;

function TRttiPropertyHelper.EhCampoTexto: Boolean;
begin
  Result := Tem<TCampoTexto>;
end;

function TRttiPropertyHelper.EhMaximo: Boolean;
begin
   Result := Tem<TMaximo>;
end;

function TRttiPropertyHelper.EhMedia: Boolean;
begin
  Result := Tem<TMedia>;
end;

function TRttiPropertyHelper.EhMinimo: Boolean;
begin
  Result := Tem<TMinimo>;
end;

function TRttiPropertyHelper.EhSomatorio: Boolean;
begin
  Result := Tem<TSomatorio>;
end;

function TRttiPropertyHelper.GetAtribute<T>: T;
var
  atributo: TCustomAttribute;
begin
   Result := nil;
   for atributo in GetAttributes do
   begin
     if atributo is T then
       Exit((atributo as T));
   end;

end;

function TRttiPropertyHelper.Tem<T>: Boolean;
begin
  Result := GetAtribute<T> <> nil;
end;

{ TRttiTypeHelper }

function TRttiTypeHelper.GetAtribute<T>: T;
var
   atributo: TCustomAttribute;
begin
  Result := nil;
  for atributo in GetAttributes do
  begin
    if atributo is T then
       Exit((atributo as T));
  end;
end;

function TRttiTypeHelper.GetFk: TRttiProperty;
begin
  Result := GetPropertyFromAtribute<TChaveEstrangeira>;
end;

function TRttiTypeHelper.GetPk: TRttiProperty;
begin
  Result := GetPropertyFromAtribute<TChavePrimaria>;
end;

function TRttiTypeHelper.GetPropertyFromAtribute<T>(
  aPropName: string): TRttiProperty;
var prop: TRttiProperty;
begin
   Result := nil;
   for prop in GetProperties do
   begin
     if prop.GetAtribute<T> = nil then
       continue;
     if prop.GetAtribute<TCampoTexto>.Nome = aPropName then
       Exit(prop);
     if prop.GetAtribute<TCampoInteiro>.Nome = aPropName then
        Exit(prop);

   end;
end;

function TRttiTypeHelper.GetPropertyFromAtribute<T>: TRttiProperty;
var
   prop: TRttiProperty;
begin
   Result := nil;
   for prop in GetProperties do
   begin
     if prop.GetAtribute<T> <> nil then
       Exit(prop);
   end;
end;

function TRttiTypeHelper.IsTabela: boolean;
begin
  Result := Tem<TChavePrimaria>;
end;

function TRttiTypeHelper.IsTabelaEstrangeira: Boolean;
begin
  Result := Tem<TChaveEstrangeira>;
end;

function TRttiTypeHelper.Tem<T>: Boolean;
begin
  Result := GetAtribute<T> <> nil;
end;

end.
