unit orm.lib.Biblioteca;

interface

uses SysUtils, IniFiles, Vcl.Forms, Datasnap.DBClient, ZDataset, Data.DB,
  orm.IBaseVO, System.Rtti, orm.Atributos;

  type
    TLib<T : class, constructor> = class(TObject)
      private
        FArqIni: TIniFile;
      public
         function LocalizarSubstituir(texto,busca,troca: string): string;
         //function VerificaCaminho: boolean;
         procedure EscreverIni(aDriver,aBanco,aHost,aDll,aUsuario,aSenha: string; aPorta:integer);
         function CopiarParaDataSet(aQuery: TZQuery): TClientDataSet;
         function PegarNomeTabela(aObj: T): string;
    end;

implementation

var  caminhoIni: string;

{ TLib }

function TLib<T>.CopiarParaDataSet(aQuery: TZQuery): TClientDataSet;
var cds: TClientDataSet;
    field: TField;
begin
//Função que popula um TClientDataSet a partir de um componente tipo Query(TZQuery,TFQuery,TQuery,etc...).
  cds := TClientDataSet.Create(nil);
  try
    aQuery.First;
    cds.Append;
    while not aQuery.Eof do
    begin
      for field in aQuery.Fields do
        cds.Fields[field.Index].Value := field.Value;
      cds.Post;
      aQuery.Next;
    end;
    Result := cds;
  finally
    cds.Free;
  end;
end;

procedure TLib<T>.EscreverIni(aDriver,aBanco,aHost,aDll,aUsuario,aSenha: string; aPorta:integer);
begin
   //if VerificaCaminho then
  // begin
     FArqIni := TIniFile.Create(ExtractFilePath(Application.ExeName) + '\config.ini');
     FArqIni.WriteString('Configuracao',aDriver,aDriver);
     FArqIni.WriteString('Configuracao',aBanco,aBanco);
     FArqIni.WriteString('Configuracao',aHost,aHost);
     FArqIni.WriteString('Configuracao',aDll,aDll);
     FArqIni.WriteString('Configuracao',aUsuario,aUsuario);
     FArqIni.WriteString('Configuracao',aSenha,aSenha);
     FArqIni.WriteInteger('Configuracao','',aPorta);
   //end;

end;

function TLib<T>.LocalizarSubstituir(texto, busca, troca: string): string;
var
  n,i: integer;
begin
   i := length(busca);
   for n := 0 to length(texto) do
   begin
     if Copy(texto, n, i) = busca then
     begin
       Delete(texto, n, i);
       Insert(troca, texto, n);
     end;
   end;
   Result := texto;
end;

function TLib<T>.PegarNomeTabela(aObj: T): string;
var contexto: TRttiContext;
    tipo: TRttiType;
    atributo: TCustomAttribute;
begin
   contexto := TRttiContext.Create();
   try
     tipo := contexto.GetType(aObj.ClassInfo);
     for atributo in tipo.GetAttributes  do
     begin
       if atributo is TTabela then
           Result := TTabela(atributo).Nome;
     end;
   finally
     contexto.Free;
   end;
end;

{function TLib<T>.VerificaCaminho: boolean;
begin
   caminhoIni := ExtractFilePath(Application.ExeName) + '\config.ini';
   if FileExists(caminhoIni) then
      Result := True
   else Result := False;
end;}

end.
