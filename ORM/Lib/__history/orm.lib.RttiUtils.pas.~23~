unit orm.lib.RttiUtils;

interface

uses System.Rtti, System.Classes, System.Variants, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.ComCtrls, Vcl.Mask, System.StrUtils, System.SysUtils;

type
  TRttiUtils<T: class, constructor> = class
    private
       class procedure BindValueToComponent(aComponent: TComponent; aValue: Variant);
       class procedure BindValueToProperty(aEntidade: T; aProp: TRttiProperty; aValue: TValue);
       class function GetComponentToValue(aComponent: TComponent): TValue;
    public

end;

implementation

{ TRttiUtils }



class procedure TRttiUtils<T>.BindValueToProperty(aEntidade: T;
  aProp: TRttiProperty; aValue: TValue);
begin
   case aProp.PropertyType.TypeKind of
     tkUnknown: ;
     tkInteger: aProp.SetValue(Pointer(aEntidade), StrToInt(aValue.ToString));
     tkChar: aProp.SetValue(Pointer(aEntidade), aValue);
     tkEnumeration: ;
     tkFloat:
        begin
          if (aValue.TypeInfo = TypeInfo(TDate)) or (aValue.TypeInfo = TypeInfo(TDateTime)) or (aValue.TypeInfo = TypeInfo(TTime)) then
             aProp.SetValue(Pointer(aEntidade), StrToDateTime(aValue.ToString))
          else
             aProp.SetValue(Pointer(aEntidade), StrToFloat(aValue.ToString));

        end;
     tkSet: ;
     tkClass: ;
     tkMethod: ;
     tkString, tkWString, tkLString, tkWChar, tkVariant, tkUString:
            aProp.SetValue(Pointer(aEntidade), aValue);
     tkArray: ;
     tkRecord: ;
     tkInterface: ;
     tkInt64: aProp.SetValue(Pointer(aEntidade), aValue.Cast<Int64>);
     tkDynArray: ;
     tkClassRef: ;
     tkPointer: ;
     tkProcedure: ;
     tkMRecord: ;
     else
       aProp.SetValue(Pointer(aEntidade), aValue);
   end;
end;

class function TRttiUtils<T>.GetComponentToValue(
  aComponent: TComponent): TValue;
var a: string;
begin
   if aComponent is TEdit then
     Result := TValue.FromVariant((aComponent as TEdit).Text);
   if aComponent is TComboBox then
      Result := TValue.FromVariant((aComponent as TComboBox).Items[(aComponent as TComboBox).ItemIndex]);
   if aComponent is TRadioGroup then
      Result := TValue.FromVariant((aComponent as TRadioGroup).Items[(aComponent as TRadioGroup).ItemIndex]);
   if aComponent is TCheckBox then
      Result := TValue.FromVariant((aComponent as TCheckBox).Checked);
   if aComponent is TDateTimePicker then
      Result := TValue.FromVariant((aComponent as TDateTimePicker).Date);
end;

{ TRttiUtils }

class procedure TRttiUtils<T>.BindValueToComponent(aComponent: TComponent;
  aValue: Variant);
begin
  if VarIsNull(aValue) then
    exit;

   if aComponent is TEdit then
      (aComponent as TEdit).Text             := aValue;
   if aComponent is TComboBox then
      (aComponent as TComboBox).ItemIndex    := (aComponent as TComboBox).Items.IndexOf(aValue);
   if aComponent is TRadioGroup then
      (aComponent as TRadioGroup).ItemIndex  := (aComponent as TRadioGroup).Items.IndexOf(aValue);
   if aComponent is TCheckBox then
      (aComponent as TCheckBox).Checked      := aValue;
   if aComponent is TDateTimePicker then
      (aComponent as TDateTimePicker).Date   := aValue;
   if aComponent is TMemo then
      (aComponent as TMemo).Lines.Add(aValue);
   if aComponent is TMaskEdit then
      (aComponent as TMaskEdit).Text         := aValue;
end;

end.
