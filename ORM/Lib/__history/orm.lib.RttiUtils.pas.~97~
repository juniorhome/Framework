unit orm.lib.RttiUtils;

interface

uses System.Rtti, System.Classes, System.Variants, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.ComCtrls, Vcl.Mask, System.StrUtils, System.SysUtils, Vcl.Forms, orm.Atributos,
  orm.lib.Helper.RttiHelper, Generics.Collections, System.TypInfo, Data.DB,
  orm.conexao.interfaces.Interfaces;

type
  TRttiUtils<T: class, constructor> = class(TInterfacedObject, iRttiUtil<T>)
    private
       FInstance: T;
       class procedure BindValueToComponent(aComponent: TComponent; aValue: Variant);
       class procedure BindValueToProperty(aEntidade: T; aProp: TRttiProperty; aValue: TValue);
       class function GetComponentToValue(aComponent: TComponent): TValue;
       class function GetRttiPropertyValue(aEntidade: T; aPropNome: string): Variant;
       class function GetRttiProperty(aEntidade: T; aPropNome: string): TRttiProperty;
       function FloatFormat(aValue: string): Currency;
    public
       //Métodos que realizam a ligação entre os campos com os componentes...
       constructor Create(aInstance: T);
       destructor Destroy; override;
       class function New(aInstancia: T): iRttiUtil<T>;
       function Fields(var aFields: string): iRttiUtil<T>;
       function FieldsInsert(var aFields: string): iRttiUtil<T>;
       function Param(var aParam: string): iRttiUtil<T>;
       function Where(var aWhere: string): iRttiUtil<T>;
       function FieldsUpdate(var aFields: string): iRttiUtil<T>;
       function NomeTabela(var aNomeTabela: string): iRttiUtil<T>;
       function DictionaryFields(var aDictionary: TDictionary<string, variant>): iRttiUtil<T>;
       function BindClassToForm(aForm: TForm; const aEntidade: T): iRttiUtil<T>;
       function BindFormToClass(aForm: TForm; var aEntidade: T): iRttiUtil<T>;
       function ListarCampos(var aLista: TList<string>): iRttiUtil<T>;
       function DataSetToEntityList(aDataSet: TDataSet; var aLista: TObjectList<T>): iRttiUtil<T>;
       function DataSetToEntity(aDataSet: TDataSet; var aEntity: T): iRttiUtil<T>;

end;

implementation

{ TRttiUtils }
class procedure TRttiUtils<T>.BindValueToProperty(aEntidade: T;
  aProp: TRttiProperty; aValue: TValue);
begin
   case aProp.PropertyType.TypeKind of
     tkUnknown: ;
     tkInteger: aProp.SetValue(Pointer(aEntidade), StrToInt(aValue.ToString));
     tkChar: aProp.SetValue(Pointer(aEntidade), aValue);
     tkEnumeration: ;
     tkFloat:
        begin
          if (aValue.TypeInfo = TypeInfo(TDate)) or (aValue.TypeInfo = TypeInfo(TDateTime)) or (aValue.TypeInfo = TypeInfo(TTime)) then
             aProp.SetValue(Pointer(aEntidade), StrToDateTime(aValue.ToString))
          else
             aProp.SetValue(Pointer(aEntidade), StrToFloat(aValue.ToString));

        end;
     tkSet: ;
     tkClass: ;
     tkMethod: ;
     tkString, tkWString, tkLString, tkWChar, tkVariant, tkUString:
            aProp.SetValue(Pointer(aEntidade), aValue);
     tkArray: ;
     tkRecord: ;
     tkInterface: ;
     tkInt64: aProp.SetValue(Pointer(aEntidade), aValue.Cast<Int64>);
     tkDynArray: ;
     tkClassRef: ;
     tkPointer: ;
     tkProcedure: ;
     tkMRecord: ;
     else
       aProp.SetValue(Pointer(aEntidade), aValue);
   end;
end;

constructor TRttiUtils<T>.Create(aInstance: T);
begin
  FInstance := aInstance;
end;

function TRttiUtils<T>.DataSetToEntity(aDataSet: TDataSet;
  var aEntity: T): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  campo: TField;
  info: PTypeInfo;
  valor: TValue;
begin
  Result := Self;
  aDataSet.First;
  while  not aDataSet.Eof do
  begin
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
     for campo in aDataSet.Fields do
     begin
       tipo := contexto.GetType(info);
       for prop in tipo.GetProperties do
       begin
         if LowerCase(prop.FieldName) = LowerCase(campo.FieldName) then
         begin
           case prop.PropertyType.TypeKind of
             tkInteger,
             tkInt64:
                  Valor := campo.AsInteger;
             tkString,
             tkChar,
             tkWChar,
             tkLString,
             tkWString,
             tkUString: Valor := campo.AsString;
             tkFloat: Valor := campo.AsFloat;
           end;
           prop.SetValue(Pointer(FInstance), Valor);
         end;
       end;
     end;
   finally
     contexto.Free;
   end;
   aDataSet.Next;
  end;
  aDataSet.First;
end;

function TRttiUtils<T>.DataSetToEntityList(aDataSet: TDataSet;
  var aLista: TObjectList<T>): iRttiUtil<T>;
var
   campo: TField;
   contexto: TRttiContext;
   tipo: TRttiType;
   prop: TRttiProperty;
   info: PTypeInfo;
   valor: TValue;
begin
  Result := Self;
  aLista.Clear;
  while not aDataSet.Eof do
  begin
    aLista.Add(T.Create);
    info := System.TypeInfo(T);
    contexto := TRttiContext.Create;
    try
      for campo in aDataSet.Fields do
      begin
        tipo := contexto.GetType(T);
        for prop in tipo.GetProperties do
        begin
          if LowerCase(prop.FieldName) = LowerCase(campo.FieldName) then
          begin
            case prop.PropertyType.TypeKind of
             tkUnknown, tkString, tkWChar, tkLString, tkWString, tkUString:
                valor := campo.AsString;
              tkInteger, tkInt64:
                valor := campo.AsInteger;
              tkChar: ;
              tkEnumeration: ;
              tkFloat:
                valor := campo.AsFloat;
              tkSet: ;
              tkClass: ;
              tkMethod: ;
              tkVariant: ;
              tkArray: ;
              tkRecord: ;
              tkInterface: ;
              tkDynArray: ;
              tkClassRef: ;
              tkPointer: ;
              tkProcedure: ;
            end;
            prop.SetValue(Pointer(aLista[Pred(aLista.Count)]), Valor);
          end;
         end;
        end;
    finally
      contexto.Free;
    end;
  end;
end;

destructor TRttiUtils<T>.Destroy;
begin

  inherited;
end;

function TRttiUtils<T>.DictionaryFields(
  var aDictionary: TDictionary<string, variant>): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
   Result := Self;
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
     tipo := contexto.GetType(info);
     for prop in tipo.GetProperties do
     begin
       case prop.PropertyType.TypeKind of
         tkInteger,
         tkInt64:
         begin
           if prop.EhChaveEstrangeira then
           begin
             if prop.GetValue(Pointer(FInstance)).AsInteger = 0 then
                aDictionary.Add(prop.FieldName, Null)
             else  aDictionary.Add(prop.FieldName, prop.GetValue(Pointer(FInstance)).AsInteger);
           end
           else aDictionary.Add(prop.FieldName, prop.GetValue(Pointer(FInstance)).AsInteger);
         end;
         tkFloat:
         begin
           if prop.GetValue(Pointer(FInstance)).TypeInfo = TypeInfo(TDate) then
             aDictionary.Add(prop.FieldName, StrToDate(prop.GetValue(Pointer(FInstance)).AsString));
           if prop.GetValue(Pointer(FInstance)).TypeInfo = TypeInfo(TDateTime) then
             aDictionary.Add(prop.FieldName, StrToDateTime(prop.GetValue(Pointer(FInstance)).AsString));
           if prop.GetValue(Pointer(FInstance)).TypeInfo = TypeInfo(TTime) then
             aDictionary.Add(prop.FieldName, StrToTime(prop.GetValue(Pointer(FInstance)).AsString))
           else
             aDictionary.Add(prop.FieldName, FloatFormat(prop.GetValue(Pointer(FInstance)).AsString));
         end;
         tkString,
         tkLString,
         tkWString,
         tkWChar,
         tkChar: aDictionary.Add(prop.FieldName, prop.GetValue(Pointer(FInstance)).AsString);
         tkVariant: aDictionary.Add(prop.FieldName, prop.GetValue(Pointer(FInstance)).AsVariant);
         else
           aDictionary.Add(prop.FieldName, prop.GetValue(Pointer(FInstance)).AsString);
       end;
     end;
   finally
     contexto.Free;
   end;
end;

function TRttiUtils<T>.Fields(var aFields: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
   Result := Self;
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
     tipo := contexto.GetType(info);
     for prop in tipo.GetProperties do
     begin
       if prop.EhCampoTexto then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoInteiro then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoData then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoDataHora then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoExtended then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoMonetario then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhCampoBooleano then
         aFields := aFields + prop.FieldName + ',';
       if prop.EhChavePrimaria then
          aFields := aFields + prop.FieldName + ',';
       if prop.EhChaveEstrangeira then
          aFields := aFields + prop.FieldName + ',';
     end;
   finally
     //Retira a última virgula da string.
     aFields := Copy(aFields, 0, Length(aFields) - 2) + '';
     contexto.Free;
   end;
end;

function TRttiUtils<T>.FieldsInsert(var aFields: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
   Result := Self;
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
      tipo := contexto.GetType(info);
      for prop in tipo.GetProperties do
      begin
        if prop.EhCampoTexto then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoInteiro then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoData then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoDataHora then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoExtended then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoMonetario then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhCampoBooleano then
          aFields := aFields + prop.FieldName + ',';
        if prop.EhChaveEstrangeira then
          aFields := aFields + prop.FieldName + ',';
      end;
   finally
     //Retira a última virgula da string.
     aFields := Copy(aFields, 0, Length(aFields) - 2) + '';
     contexto.Free;
   end;
end;

function TRttiUtils<T>.FieldsUpdate(var aFields: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
  Result := Self;
  info := System.TypeInfo(T);
  contexto := TRttiContext.Create;
  try
    tipo := contexto.GetType(info);
    for prop in tipo.GetProperties do
    begin
      if prop.EhCampoTexto then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoInteiro then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoData then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoDataHora then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoExtended then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoMonetario then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhCampoBooleano then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
      if prop.EhChaveEstrangeira then
        aFields := aFields + prop.FieldName + ' = ' + ':' + prop.FieldName + ',';
    end;
  finally
    aFields := Copy(aFields, 0, Length(aFields) - 2) + '';
    contexto.Free;
  end;
end;

function TRttiUtils<T>.FloatFormat(aValue: string): Currency;
begin
  while Pos('.', aValue) > 0 do
    Delete(aValue, Pos(',', aValue), 1);
  Result := StrToCurr(aValue);
end;

class function TRttiUtils<T>.GetComponentToValue(
  aComponent: TComponent): TValue;
var a: string;
begin
   if aComponent is TEdit then
     Result := TValue.FromVariant((aComponent as TEdit).Text);
   if aComponent is TComboBox then
      Result := TValue.FromVariant((aComponent as TComboBox).Items[(aComponent as TComboBox).ItemIndex]);
   if aComponent is TRadioGroup then
      Result := TValue.FromVariant((aComponent as TRadioGroup).Items[(aComponent as TRadioGroup).ItemIndex]);
   if aComponent is TCheckBox then
      Result := TValue.FromVariant((aComponent as TCheckBox).Checked);
   if aComponent is TDateTimePicker then
      Result := TValue.FromVariant((aComponent as TDateTimePicker).Date);
   if aComponent is TMemo then
      Result := TValue.FromVariant((aComponent as TMemo).Lines.Text);
   if aComponent is TMaskEdit then
      Result := TValue.FromVariant((aComponent as TMaskEdit).Text);
   if aComponent is TRadioButton then
       Result := TValue.FromVariant((aComponent as TRadioButton).Checked);
end;

class function TRttiUtils<T>.GetRttiProperty(aEntidade: T;
  aPropNome: string): TRttiProperty;
 var
   contexto: TRttiContext;
   tipo: TRttiType;
begin
  contexto := TRttiContext.Create;
  try
    tipo := contexto.GetType(aEntidade.ClassInfo);
    Result := tipo.GetProperty(aPropNome);
    if not Assigned(Result) then
     Result := tipo.GetProperty(aPropNome);
  finally
    contexto.Free;
  end;
end;

class function TRttiUtils<T>.GetRttiPropertyValue(aEntidade: T;
  aPropNome: string): Variant;
begin
  Result := GetRttiProperty(aEntidade, aPropNome).GetValue(Pointer(aEntidade)).AsVariant;
end;

function TRttiUtils<T>.ListarCampos(var aLista: TList<string>): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
  Result := Self;
  if not Assigned(aLista) then
    aLista := TList<string>.Create;
  info := System.TypeInfo(T);
  contexto := TRttiContext.Create;
  try
     tipo := contexto.GetType(T);
     for prop in tipo.GetProperties do
       aLista.Add(prop.Name);
  finally
    contexto.Free;
  end;
end;

class function TRttiUtils<T>.New(aInstancia: T): iRttiUtil<T>;
begin
   Result := Self.Create(aInstancia);
end;

function TRttiUtils<T>.NomeTabela(var aNomeTabela: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  info: PTypeInfo;
begin
   Result := Self;
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
      tipo := contexto.GetType(info);
      if tipo.Tem<TTabela> then
        aNomeTabela := tipo.GetAtribute<TTabela>.Nome;
   finally
     contexto.Free;
   end;
end;

function TRttiUtils<T>.Param(var aParam: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
  Result := Self;
  info := System.TypeInfo(T);
  contexto := TRttiContext.Create;
  try
    tipo := contexto.GetType(info);
    for prop in tipo.GetProperties do
    begin
      if prop.EhCampoTexto then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoInteiro then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoData then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoDataHora then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoExtended then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoMonetario then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhCampoBooleano then
        aParam := aParam + ':' + prop.FieldName + ',';
      if prop.EhChaveEstrangeira then
        aParam := aParam + ':' + prop.FieldName + ',';
    end;
  finally
    aParam := Copy(aParam, 0, Length(aParam) - 2) + '';
    contexto.Free;
  end;
end;

function TRttiUtils<T>.Where(var aWhere: string): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  prop: TRttiProperty;
  info: PTypeInfo;
begin
   Result := Self;
   info := System.TypeInfo(T);
   contexto := TRttiContext.Create;
   try
     tipo := contexto.GetType(info);
     for prop in tipo.GetProperties do
     begin
       if prop.EhChavePrimaria then
         aWhere := aWhere + prop.FieldName + ' = ' + ':' + prop.FieldName + ' AND ';
     end;
   finally
     aWhere := Copy(aWhere, 0, Length(aWhere) - 4) + '';
     contexto.Free;
   end;
end;

{ TRttiUtils }

function TRttiUtils<T>.BindClassToForm(aForm: TForm; const aEntidade: T): iRttiUtil<T>;
var contexto: TRttiContext;
    tipo: TRttiType;
    campo: TRttiField;
    atributo: TCustomAttribute;
begin
   Result := Self;
   contexto := TRttiContext.Create;
   try
     tipo := contexto.GetType(aForm.ClassInfo);
     for campo in tipo.GetFields do
       for atributo in campo.GetAttributes do
       begin
         if atributo is TBind then
           BindValueToComponent(aForm.FindComponent(campo.Name), GetRttiPropertyValue(aEntidade, campo.GetAtribute<TBind>.Nome));
       end;
   finally
     contexto.Free;
   end;
end;

function TRttiUtils<T>.BindFormToClass(aForm: TForm; var aEntidade: T): iRttiUtil<T>;
var
  contexto: TRttiContext;
  tipo: TRttiType;
  campo: TRttiField;
begin
   Result := Self;
   contexto := TRttiContext.Create;
   try
     tipo := contexto.GetType(aForm.ClassInfo);
     for campo in tipo.GetFields do
     begin
       if campo.Tem<TBind> then
          BindValueToProperty(aEntidade,
                               GetRttiProperty(aEntidade, campo.GetAtribute<TBind>.Nome),
                               GetComponentToValue(aForm.FindComponent(campo.Name)));

     end;
   finally
     contexto.Free;
   end;
end;

class procedure TRttiUtils<T>.BindValueToComponent(aComponent: TComponent;
  aValue: Variant);
begin
  if VarIsNull(aValue) then
    exit;

   if aComponent is TEdit then
      (aComponent as TEdit).Text             := aValue;
   if aComponent is TComboBox then
      (aComponent as TComboBox).ItemIndex    := (aComponent as TComboBox).Items.IndexOf(aValue);
   if aComponent is TRadioGroup then
      (aComponent as TRadioGroup).ItemIndex  := (aComponent as TRadioGroup).Items.IndexOf(aValue);
   if aComponent is TCheckBox then
      (aComponent as TCheckBox).Checked      := aValue;
   if aComponent is TDateTimePicker then
      (aComponent as TDateTimePicker).Date   := aValue;
   if aComponent is TMemo then
      (aComponent as TMemo).Lines.Add(aValue);
   if aComponent is TMaskEdit then
      (aComponent as TMaskEdit).Text         := aValue;
   if aComponent is TRadioButton then
      (aComponent as TRadioButton).Checked   := aValue;
end;

end.
