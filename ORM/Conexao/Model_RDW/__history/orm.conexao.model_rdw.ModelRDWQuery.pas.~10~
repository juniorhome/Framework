unit orm.conexao.model_rdw.ModelRDWQuery;

interface

uses
  orm.conexao.interfaces.Interfaces, uRESTDWPoolerDB, orm.lib.Biblioteca,
  orm.IBaseVO, System.SysUtils, System.Classes, Data.DB;

type
  TModelRDWQuery = class(TInterfacedObject, IModelQuery)
    private
      FConnection : TRESTDWDatabase;
      FQuery : TRESTDWClientSQL;
    public
      constructor Create(aConnection: TRESTDWDataBase; aObj: IBaseVO);
      destructor Destroy;override;
      class function New(aConnection: TRESTDWDataBase; aObj: IBaseVO): IModelQuery;
      function SQL: TStrings;
      function Params: TParams;
      function  ExecSQL: IModelQuery;
      function DataSet: TDataSet;
  end;

implementation

{ TModelRDWQuery }

constructor TModelRDWQuery.Create(aConnection: TRESTDWDataBase; aObj: IBaseVO);
var Lib : TLib;
begin
  Lib := TLib.Create(nil);
  FConnection := aConnection;
  FQuery := TRESTDWClientSQL.Create(nil);
  FQuery.DataBase := FConnection;
  FQuery.AutoCommitData := False;
  FQuery.AutoRefreshAfterCommit := True;
  FQuery.UpdateTableName := Lib.PegarNomeTabela(aObj);
end;

function TModelRDWQuery.DataSet: TDataSet;
begin
   Result := FQuery;
end;

destructor TModelRDWQuery.Destroy;
begin
  FreeAndNil(FQuery);
  inherited;
end;

function TModelRDWQuery.ExecSQL: IModelQuery;
var aErro: string;
begin
   Result := Self;
   FQuery.ExecSQL(aErro);
   FQuery.ApplyUpdates(aErro);
end;

class function TModelRDWQuery.New(aConnection: TRESTDWDataBase;
  aObj: IBaseVO): IModelQuery;
begin
   Result := Self.Create(aConnection, aObj);
end;

function TModelRDWQuery.Params: TParams;
begin
  Result := FQuery.Params;
end;

function TModelRDWQuery.SQL: TStrings;
begin
   Result := FQuery.SQL;
end;

end.
