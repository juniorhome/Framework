unit orm.lib.Validacao;

interface

uses System.RegularExpressions, orm.lib.Constantes;

 type
   TValidacao = class
     private
     public
       //Validaçao na Tela de cadastro.
       class function ValidarEmail(const Email: string): boolean;
       class function ValidarData(const Data: string): boolean;
       class function ValidarCnpj(const Cnpj: string): boolean;
       class function ValidarCpf(const Cpf: string): boolean;
       class function ValidarTelefone(const Telefone: string): boolean;
       class function ValidarCelular(const Celular: string): boolean;

       //Validação no servidor.
       class function IsCpf(const Cpf: string): boolean;
   end;

implementation

{ TValidacao }

class function TValidacao.IsCpf(const Cpf: string): boolean;
var
   dig10, dig11: string;
   s, i, r, peso: integer;
begin
   if ((Cpf = '00000000000') or (Cpf = '11111111111') or (Cpf = '22222222222')
      or (Cpf = '33333333333') or (Cpf = '44444444444') or (Cpf = '55555555555')
      or (Cpf = '66666666666') or (Cpf = '77777777777') or (Cpf = '88888888888')
      or (Cpf = '99999999999') or (Length(Cpf) <> 11)) then
      begin
        Result := False;
        exit;
      end;
   try
      s := 0;
      peso := 10;

   except

   end;

end;

class function TValidacao.ValidarCelular(const Celular: string): boolean;
begin
  Result := TRegex.IsMatch(Celular, CONST_CELULAR);
end;

class function TValidacao.ValidarCnpj(const Cnpj: string): boolean;
begin
   Result := TRegex.IsMatch(Cnpj, CONST_CNPJ);
end;

class function TValidacao.ValidarCpf(const Cpf: string): boolean;
begin
  Result := TRegex.IsMatch(Cpf, CONST_CPF);
end;

class function TValidacao.ValidarData(const Data: string): boolean;
begin
   Result := TRegex.IsMatch(Data, CONST_DATA);
end;

class function TValidacao.ValidarEmail(const Email: string): boolean;
begin
   Result := TRegex.IsMatch(Email, CONST_EMAIL);
end;

class function TValidacao.ValidarTelefone(const Telefone: string): boolean;
begin
  Result := TRegex.IsMatch(Telefone, CONST_TELEFONE);
end;

end.
